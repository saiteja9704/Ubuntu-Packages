
input {
     tcp {
     port => "12401"
  }
}

filter {
  mutate {
    copy => {"[log][source][ip]" => "[host][ip]"}
    add_field => {
      "[event][module]" => "cisco"
      "[event][dataset]" => "cisco.router"
    }
    remove_field => [ "host" ]
  }

  mutate {
    strip => ["message"]
  }

  grok {
    tag_on_failure => "_parsefailure_header"
    match => { "message" => "(^(.*?)(<(?<pri>\d+)>)(\s)?(?<actual_msg>.*$))|(^(?<actual_msg>.*)$)" }
    timeout_millis => 500
  }
  syslog_pri {
    syslog_pri_field_name => "pri"
    remove_field => [ "pri" ]
  }

  mutate {
    copy => { "[log][source][hostname]" => "[tmp][log_source_hostname]"}
  }
  mutate {
    split => { "[tmp][log_source_hostname]" => "." }
  }

  mutate {
    id => "cisco-mutate-logoriginal1"
    add_field => {"[log][original]" => "%{[message]}"}
  }
  mutate {
    id => "cisco-mutate-logoriginal2"
    lowercase => ["[message]"]
  }

  dissect {
    id => "cisco.router-mutate-dissect-actual_msg"
    mapping => {
      "actual_msg" => "%{[[event][id]]}: %{[[tmp][device_timestamp]]->} %{+[[tmp][device_timestamp]]} %{+[[tmp][device_timestamp]]} %{[[source][address]]}: %%{[[tmp][facility]]}-%{[[tmp][severity]]}-%{[[tmp][mnemonic]]}: %{[[tmp][msg]]}"
    }
  }


  mutate {
    id => "cisco-mutate-gsub-date"
    gsub => [ "[tmp][ingest_timestamp]", "t", "-"]
  }

  date {
    id => "cisco-date-ingest"
    match => [ "[tmp][ingest_timestamp]",
      "MMM dd yyyy HH:mm:ss",
      "MMM  d yyyy HH:mm:ss",
      "ISO8601",
      "yyyy-MM-dd-HH:mm:ss.SSSZ",
      "MMM dd HH:mm:ss.SSS",
      "MMM dd HH:mm:ss.SSS ZZZ",
      "MMM dd HH:mm:ss ZZZ",
      "MMM dd HH:mm:ss.SSS",
      "YYYY MMM dd HH:mm:ss.SSS ZZZ",
      "YYYY MMM dd HH:mm:ss ZZZ",
      "YYYY MMM dd HH:mm:ss.SSS",
      "MMM dd HH:mm:ss.SSS ZZZ",
      "MMM dd HH:mm:ss.SSS",
      "MMM dd HH:mm:ss"
    ]
    target => "[event][ingested]"
    tag_on_failure => "_dateparsefailure_cisco.router-date-[event][ingested]"
  }

  date {
    id => "cisco.router-date-event.started"
    match =>[ "[tmp][device_timestamp]",
      "MMM dd yyyy HH:mm:ss",
      "MMM  d yyyy HH:mm:ss",
      "ISO8601",
      "yyyy-MM-dd-HH:mm:ss.SSSZ",
      "MMM dd HH:mm:ss.SSS",
      "MMM dd HH:mm:ss.SSS ZZZ",
      "MMM dd HH:mm:ss ZZZ",
      "MMM dd HH:mm:ss.SSS",
      "YYYY MMM dd HH:mm:ss.SSS ZZZ",
      "YYYY MMM dd HH:mm:ss ZZZ",
      "YYYY MMM dd HH:mm:ss.SSS",
      "MMM dd HH:mm:ss.SSS ZZZ",
      "MMM dd HH:mm:ss.SSS",
      "MMM dd HH:mm:ss"
    ]
    target => "[event][start]"
    tag_on_failure => "_dateparsefailure_cisco.router-date-event.started"
  }

  mutate {
    add_field => { "[event][action]" => "%{[[tmp][facility]]}.%{[[tmp][mnemonic]]}"}
  }

  mutate {
    uppercase => ["[tmp][facility]"]
  }
  translate {
    id => "cisco-translate-facility"
    field => "[tmp][facility]"
    destination => "[tmp][facility_translation]"
    dictionary_path => "${LOGSTASH_HOME}/config/cisco_ios_facility_categories.csv"  # ** Must set full "/path/to/lookup.json" to your lookup file **
    refresh_interval => 3000
    fallback => "not_found_facility"
  }

  translate {
    id => "cisco-translate-mnemonic"
    field => "[tmp][mnemonic]"
    destination => "[tmp][mnemonic_translation]"
    dictionary_path => "${LOGSTASH_HOME}/config/cisco_ios.json" # ** Must set full "/path/to/lookup.json" to your lookup file **
    refresh_interval => 3000
    fallback => '{"key1":"not_found"}'
  }

  if [tmp][mnemonic_translation] == '{"key1":"not_found"}' {
    json {
      source => "[tmp][mnemonic_translation]"
      target => "[tmp][mnemonic_translation]"
    }
    mutate {
      remove_field => ["[tmp][mnemonic_translation]"]
    }
    mutate {
      add_field => {
       "[tmp][mnemonic_translation][msg_explanation]" => "not_found_msg_explanation"
       "[tmp][mnemonic_translation][msg_recommendation]" => "not_found_msg_recommendation"
       "[tmp][mnemonic_translation][facility]" => "not_found_translation_facility"
       "[tmp][mnemonic_translation][msg_txt]" => "not_found_parsing_rule"
      }
    }
  }

  mutate {
    add_field => {
      "[event][reason]" => "%{[[tmp][mnemonic_translation][msg_explanation]]}"
      "[error][message]" => "%{[[tmp][msg]]}"
      "[event][recommendation]" => "%{[[tmp][mnemonic_translation][msg_recommendation]]}"
      "[tmp][msg_parse]" => "%{[[tmp][mnemonic_translation][msg_txt]]}"
    }
  }

    if [event][action] == "bgp.adjchange" {
    dissect {
      mapping => {
        "[tmp][msg]" => "neighbor %{[[tmp][related][ip]]} %{[[tmp][bgp][state]]} %{[[tmp][bgp][reason]]}"
      }
    }

    mutate {
      add_field => {
        "[event][type]" => "connection"
        "[event][category]" => "network"
        "[event][kind]" => "state"
      }
    }

    translate {
      field => "[tmp][bgp][state]"
      dictionary => [
      "down", "failure",
      "up", "success"
      ]
      exact => true
      fallback => "unknown"
      destination => "[event][outcome]"
    }
  }


  if [event][action] == "link.updown" {
    grok {
      id => "cisco.router-grok-link.updown"
      match => {
        "[tmp][msg]" => "%{GREEDYDATA}interface %{GREEDYDATA:[[tmp][ifname]]}\, changed state to %{WORD:[[tmp][interface][state]]}"
      }
      timeout_millis => 500
    }

    mutate {
      add_field => {
        "[event][type]" => "connection"
        "[event][category]" => "network"
        "[event][kind]" => "state"
        "[observer][ingress][interface][name]" => "%{[[tmp][ifname]]}"
        "[observer][ingress][interface][alias]" => "unknown_interface_alias"
      }
    }

    translate {
      field => "[tmp][interface][state]"
      dictionary => [
      "down", "failure",
      "up", "success"
      ]
      exact => true
      fallback => "unknown"
      destination => "[event][outcome]"
    }
  }
  if [event][action] == "line.updown" {
    grok {
      id => "cisco.router-grok-line.updown"
      match => {
        "[tmp][msg]" => "line protocol on interface %{GREEDYDATA:[[tmp][ifname]]}, changed state to %{WORD:[[tmp][interface][state]]}"
      }
      timeout_millis => 500
    }

    mutate {
      add_field => {
        "[event][category]" => "network"
        "[event][kind]" => "state"
        "[observer][ingress][interface][name]" => "%{[[tmp][ifname]]}"
        "[observer][ingress][interface][alias]" => "unknown_interface_alias"
      }
    }

    translate {
      field => "[tmp][interface][state]"
      dictionary => [
      "down", "failure",
      "up", "success"
      ]
      exact => true
      fallback => "unknown"
      destination => "[event][outcome]"
    }
  }


if [related][ip] {
    mutate {
      gsub => [
        "[tmp][related][ip]", "\*", ""
      ]
    }
    mutate {
      add_field => {
        "[related][ip]" => "%{[[tmp][related][ip]]}"
      }
    }
  }


  mutate {
    remove_field => [ "[tmp]"]
  }

  if [tmp][msg] =~ ":" {
    dissect {
      mapping => {
        actual_msg => "%{[[event][id]]}: %{rest_msg}"
      }
    }
    if [rest_msg] =~ "_SNOOPING_DENY" and [rest_msg] !~ "SW_DAI-4-DHCP_SNOOPING_DENY" {
      dissect {
        mapping => {
          rest_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]} %{?data}: %%{[[rule][name]]}:%{?data} %{[[rule][description]]} on %{[[destination][interface]]}, %{?data} %{[[network][vlan][id]]}.([%{[[observer][ingress][interface][name]]}/%{[[source][ip]]}/%{[[destination][mac]]}/%{[[destination][ip]]}/%{?data}"
        }
      }
    }
    else if [rest_msg] =~ "SW_DAI-4-DHCP_SNOOPING_DENY" {
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{[[rule][name]]}:%{?data} %{[[rule][description]]} on %{[[destination][interface]]}, %{?data} %{[[network][vlan][id]]}.([%{[[observer][ingress][interface][name]]}/%{[[source][ip]]}/%{[[destination][mac]]}/%{[[destination][ip]]}/%{?data}"
        }
      }
    }
    else if [rest_msg] =~ "%CDP-4-DUPLEX_MISMATCH:" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE CDP1" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{[[rule][name]]}: %{[[rule][description]]} on %{[[observer][ingress][interface][name]]} %{?data}, with %{[[destination][address]]} %{[[destination][interface]]} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "%CDP-4-NATIVE_VLAN_MISMATCH" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE CDP2" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{[[rule][name]]}: %{[[rule][description]]} on %{[[observer][ingress][interface][name]]} %{?data}, with %{[[destination][address]]} %{[[destination][interface]]} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "%SW_MATM-4-MACFLAP_NOTIF" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE MATM1" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{[[rule][name]]}: %{[[rule][description]]}"
        }
      }
    }
    else if [rest_msg] =~ "%LPOWER-3-CONTROLLER_PORT_ERR" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE LPOWER1" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{[[rule][name]]}: %{[[rule][description]]}"
        }
      }
    }
    else if [rest_msg] =~ "%SYS-4-CONFIG_RESOLVE_FAILURE" {
      mutate {
        add_field => { "[agent][parse_rule]" => "RULE 8" }
      }
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{[[rule][name]]}: %{[[rule][description]]}"
        }
      }
    }
    else if [rest_msg] =~ "duplex mismatch" and [rest_msg] !~ "14w0d:" {
      dissect {
        mapping => {
          rest_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]}: %{?data}-%{?data}-%{[[rule][name]]}:%{[[rule][description]]} on %{[[observer][ingress][interface][name]]} %{?data}, with %{[[destination][address]]} %{[[destination][interface]]} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "%DAI-4-INVALID_ARP" {
      dissect {
        mapping => {
          rest_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]}: %%{[[rule][name]]}: %{?data} %{[[rule][description]]} on %{[[observer][ingress][interface][name]]}, %{?data} %{[[network][vlan][id]]}.([%{[[observer][ingress][interface][name]]}/%{[[source][ip]]}/%{[[destination][mac]]}/%{[[destination][ip]]}/%{?data}"
        }
      }
    }
    else if [rest_msg] =~ "SW_DAI-4-INVALID_ARP" {
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{[[rule][name]]}: %{?data} %{[[rule][description]]} on %{[[observer][ingress][interface][name]]}, %{?data} %{[[network][vlan][id]]}.([%{[[observer][ingress][interface][name]]}/%{[[source][ip]]}/%{[[destination][mac]]}/%{[[destination][ip]]}/%{?data}"
        }
      }
    }
    else if [rest_msg] =~ "MACFLAP_NOTIF" {
      dissect {
        mapping => {
          rest_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]}: %%{[[rule][name]]}: %{?data} %{[[destination][mac]]} %{?data} %{?data} %{[[network][vlan][id]]} %{?data} port %{[[observer][ingress][interface][name]]} %{?data} %{?data} %{[[destination][interface]]}"
        }
      }
    }
    else if [rest_msg] =~ "%SNMP-4-NOTRAPIP"  {
      dissect {
        mapping => {
          rest_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]}: %%{[[rule][name]]}: %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "NATIVE_VLAN_MISMATCH" {
      dissect {
        mapping => {
          rest_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]}: %%{[[rule][name]]}: %{[[rule][description]]} on %{[[observer][ingress][interface][name]]} %{?data}, %{?data} %{[[destination][address]]} %{[[destination][interface]]} %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "Rx power low" {
      dissect {
        mapping => {
          rest_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]}: %%{[[rule][name]]}: %{[[observer][ingress][interface][name]]}: %{[[rule][description]]}; %{?data}"
        }
      }
    }
    else if [rest_msg] =~ "YS-4-CONFIG_RESOLVE_FAILURE" {
      dissect {
        mapping => {
          rest_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]}: %%{[[rule][name]]}: %{[[rule][description]]}"
        }
      }
    }
    else if [rest_msg] =~ "BADSERVERTYPEERROR" or [rest_msg] =~ "ENTROPY_ERROR" {
      dissect {
        mapping => {
          rest_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]}: %%{?data}-%{?data}-%{[[rule][name]]}: %{[[rule][description]]}"
        }
      }
    }
    else if [rest_msg] =~ "CONTROLLER_PORT_ERR" {
      dissect {
        mapping => {
          rest_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]}: %%{?data}-%{?data}-%{[[rule][name]]}: %{[[rule][description]]}, %{?data} %{[[observer][ingress][interface][name]]} %{+[[rule][description]]}"
        }
      }
    }
    else if [rest_msg] =~ "INPUT_QFULL_ERR" {
      dissect {
        mapping => {
          rest_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]}: %%{[[rule][name]]}: %{[[rule][description]]}"
        }
      }
    }
    else if [rest_msg] =~ "queue full" {
      dissect {
        mapping => {
          rest_msg => "%{[[rule][description]]}"
        }
      }
    }
    else if [rest_msg] =~ "ILPOWER-5-POWER_GRANTED" or [rest_msg] =~ "ILPOWER-5-IEEE_DISCONNECT" {
      dissect {
        mapping => {
          rest_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]}: %%{[[rule][name]]}: %{[[rule][description]]}"
        }
      }
    }
    else if [rest_msg] =~ "IP_SNMP-4-NOTRAPIP" {
      dissect {
        mapping => {
          rest_msg => "%{?data}: %%{[[rule][name]]}: %{[[rule][description]]}"
        }
      }
    }
    else if [rest_msg] =~ "_SNOOPING_MATCH" {
      dissect {
        mapping => {
          rest_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]} %{?data}: %%{[[rule][name]]}: %{[[rule][description]]} "
        }
      }
    }
  }
  else {
    if [actual_msg] =~ "IPACCESSLOGP" {
      dissect {
        mapping => {
          actual_msg => "%{?data}: %{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]} %{[[source][address]]} %%{[[rule][name]]}: %{?data} denied %{[[network][protocol]]} %{[[source][ip]]}(%{[[source][port]]}) -> %{[[destination][ip]]}(%{[[destination][port]]}), %{?data}"
        }
      }
    }
    else if [actual_msg] =~ "LOG_-6-SYSTEM_MSG" {
      dissect {
        mapping => {
          actual_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]} %{[[source][address]]} %%{[[rule][name]]} %{?data}"
        }
      }
    }
    else if [actual_msg] =~ "LOG_-4-SYSTEM_MSG" or [actual_msg] =~ "LOG_-3-SYSTEM_MSG" or [actual_msg] =~ "LOG_-2-SYSTEM_MSG" {
      dissect {
        mapping => {
          actual_msg => "%{[[event][start]]->} %{+[[event][start]]} %{+[[event][start]]} %{[[source][address]]} %%{[[rule][name]]} %{[[rule][description]]}"
        }
      }
    }
  }

  if [event][start] {
    if [event][start] =~ ": " {
      mutate {
        remove_field => ["[event][start]"]
      }
    }
    else {
      date {
        match => ["[event][start]", "MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss.SSS ZZZ", "MMM dd HH:mm:ss","MMM dd HH:mm:ss ZZZ"]
        timezone => "GMT"
        locale => "en"
        target => "[event][start]"
      }
    }
  }

  date {
    id => "cisco-date-event"
    match => [
        "[tmp][device_timestamp]", "MMM dd yyyy HH:mm:ss", "MMM dd yyyy HH:mm:ss.SSS ZZZ", "MMM  d yyyy HH:mm:ss", "ISO8601", "yyyy-MM-dd-HH:mm:ss.SSSZ", "MMM dd HH:mm:ss.SSS", "MMM dd HH:mm:ss.SSS ZZZ", "MMM dd HH:mm:ss ZZZ", "MMM dd HH:mm:ss.SSS", "YYYY MMM dd HH:mm:ss.SSS ZZZ", "YYYY MMM dd HH:mm:ss ZZZ", "YYYY MMM dd HH:mm:ss.SSS"
    ]
    target => "[event][start]"
  }
  mutate {
    remove_field => [ "actual_msg", "rest_msg", "[log][date]", "[destination][interface]", "[network][vlan][id]" ]
  }
  translate {
    field => "[syslog_severity]"
    destination => "[rule][category]"
    dictionary => {
      "error" => "security/failed activity"
      "info" => "security/activity"
      "notice" => "security/activity"
      "warning" => "security/warning"
    }
      fallback => "others"
  }

}
output{
  stdout { codec => rubydebug }
}
